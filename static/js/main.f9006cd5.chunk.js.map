{"version":3,"sources":["App.tsx","components/ConnectWallet.tsx","components/DisconnectWallet.tsx","components/UpdateContract.tsx","serviceWorker.js","index.tsx"],"names":["BeaconConnection","ConnectButton","Tezos","setContract","setWallet","setUserAddress","setUserBalance","setStorage","contractAddress","setBeaconConnection","setPublicToken","setPlayerStatus","wallet","setup","userAddress","a","tz","getBalance","balance","toNumber","at","contract","storage","console","log","players_status","get","player_status","connectWallet","requestPermissions","network","type","NetworkType","ITHACANET","rpcUrl","getPKH","useEffect","BeaconWallet","name","preferredNetwork","disableDefaultEvents","eventHandlers","BeaconEvent","PAIR_INIT","handler","defaultEventCallbacks","PAIR_SUCCESS","data","publicKey","setWalletProvider","client","getActiveAccount","className","onClick","DisconnectButton","setTezos","disconnectWallet","tezosTK","TezosToolkit","removeAllAccounts","removeAllPeers","destroy","UpdateContract","useState","loadingDeposit","setLoadingDeposit","loadingEarlyWithdrawal","setLoadingEarlyWithdrawal","loadingRefresh","setLoadingRefresh","deposit","methods","send","amount","req_deposit","op","confirmation","newStorage","early_withdraw","earlyWithdraw","refresh","update","disabled","App","undefined","publicToken","userBalance","playerStatus","copiedPublicToken","setCopiedPublicToken","beaconConnection","activeTab","setActiveTab","isNaN","id","players","length","hasOwnProperty","rewards","toLocaleString","Date","parse","start_date","total_rounds","period","total_deposit","href","target","rel","src","alt","dangerouslySetInnerHTML","qr","qrcode","addData","make","__html","createImgTag","generateQrCode","navigator","clipboard","writeText","setTimeout","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f9006cd5.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { TezosToolkit } from \"@taquito/taquito\";\nimport \"./App.css\";\nimport ConnectButton from \"./components/ConnectWallet\";\nimport DisconnectButton from \"./components/DisconnectWallet\";\nimport qrcode from \"qrcode-generator\";\nimport UpdateContract from \"./components/UpdateContract\";\nimport Transfers from \"./components/Transfers\";\n\nenum BeaconConnection {\n  NONE = \"\",\n  LISTENING = \"Listening to P2P channel\",\n  CONNECTED = \"Channel connected\",\n  PERMISSION_REQUEST_SENT = \"Permission request sent, waiting for response\",\n  PERMISSION_REQUEST_SUCCESS = \"Wallet is connected\"\n}\n\nconst App = () => {\n  const [Tezos, setTezos] = useState<TezosToolkit>(\n    new TezosToolkit(\"https://rpc.ithacanet.teztnets.xyz\")\n  );\n  const [contract, setContract] = useState<any>(undefined);\n  const [publicToken, setPublicToken] = useState<string | null>(\"\");\n  const [wallet, setWallet] = useState<any>(null);\n  const [userAddress, setUserAddress] = useState<string>(\"\");\n  const [userBalance, setUserBalance] = useState<number>(0);\n  const [storage, setStorage] = useState<any>();\n  const [playerStatus, setPlayerStatus] = useState<string>(\"...\");\n  const [copiedPublicToken, setCopiedPublicToken] = useState<boolean>(false);\n  const [beaconConnection, setBeaconConnection] = useState<boolean>(false);\n  const [activeTab, setActiveTab] = useState<string>(\"transfer\");\n\n  // Granadanet Increment/Decrement contract\n  // const contractAddress: string = \"KT1K3XVNzsmur7VRgY8CAHPUENaErzzEpe4e\";\n  // Hangzhounet Increment/Decrement contract\n  const contractAddress: string = \"KT1Wt7eoGoxWsEnBDaQ9YLnsvV5ZqJuiFMfc\";\n\n  const generateQrCode = (): { __html: string } => {\n    const qr = qrcode(0, \"L\");\n    qr.addData(publicToken || \"\");\n    qr.make();\n\n    return { __html: qr.createImgTag(4) };\n  };\n\n  if (publicToken && (!userAddress || isNaN(userBalance))) {\n    return (\n      <div className=\"main-box\">\n        <h1>Taquito Boilerplate</h1>\n        <div id=\"dialog\">\n          <header>Try the Taquito Boilerplate App!</header>\n          <div id=\"content\">\n            <p className=\"text-align-center\">\n              <i className=\"fas fa-broadcast-tower\"></i>&nbsp; Connecting to\n              your wallet\n            </p>\n            <div\n              dangerouslySetInnerHTML={generateQrCode()}\n              className=\"text-align-center\"\n            ></div>\n            <p id=\"public-token\">\n              {copiedPublicToken ? (\n                <span id=\"public-token-copy__copied\">\n                  <i className=\"far fa-thumbs-up\"></i>\n                </span>\n              ) : (\n                <span\n                  id=\"public-token-copy\"\n                  onClick={() => {\n                    if (publicToken) {\n                      navigator.clipboard.writeText(publicToken);\n                      setCopiedPublicToken(true);\n                      setTimeout(() => setCopiedPublicToken(false), 2000);\n                    }\n                  }}\n                >\n                  <i className=\"far fa-copy\"></i>\n                </span>\n              )}\n\n              <span>\n                Public token: <span>{publicToken}</span>\n              </span>\n            </p>\n            <p className=\"text-align-center\">\n              Status: {beaconConnection ? \"Connected\" : \"Disconnected\"}\n            </p>\n          </div>\n        </div>\n        <div id=\"footer\">\n          <img src=\"built-with-taquito.png\" alt=\"Built with Taquito\" />\n        </div>\n      </div>\n    );\n  } else if (userAddress && !isNaN(userBalance)) {\n    return (\n      <div className=\"main-box\">\n        <h1>Taquito Boilerplate</h1>\n        <div id=\"tabs\">\n          <div\n            id=\"contract\"\n            className={activeTab === \"contract\" ? \"active\" : \"\"}\n            onClick={() => setActiveTab(\"contract\")}\n          >\n            Interact with a contract\n          </div>\n        </div>\n        <div id=\"dialog\">\n          <div id=\"content\">\n            <div id=\"increment-decrement\">\n                <h3 className=\"text-align-center\">\n                  Current players: <span>{storage ? storage.players.length : 0} </span>\n                </h3>\n                <h3 className=\"text-align-center\">\n                  Your Status: <span>{playerStatus ? \n                    (playerStatus.hasOwnProperty(\"winning\") ? \"Winning\" :\n                      playerStatus.hasOwnProperty(\"waiting\") ? \"Waiting\" :\n                        playerStatus.hasOwnProperty(\"failed\") ? \"Failed\" : \"Waiting\") : \"Waiting\"} </span>\n                </h3>\n                <UpdateContract\n                  contract={contract}\n                  setUserBalance={setUserBalance}\n                  Tezos={Tezos}\n                  userAddress={userAddress}\n                  setStorage={setStorage}\n                />\n              </div>\n            <p>\n              Rewards:\n              <i className=\"far fa-address-card\"></i>&nbsp;\n              <span>{storage ? (storage.rewards.toNumber() / 1000000).toLocaleString(\"en-US\") : 0} ꜩ</span>\n            </p>\n            <p>\n              Start Date:\n              <i className=\"far fa-address-card\"></i>&nbsp;\n              <span>{storage ? new Date(Date.parse(storage.start_date)).toLocaleString('en-US') : \"\"} </span>\n            </p>\n            <p>\n              Rounds:\n              <i className=\"far fa-address-card\"></i>&nbsp;\n              <span>{storage ? storage.total_rounds.toNumber() : \"\"} </span>\n            </p>\n            <p>\n              Period Length:\n              <i className=\"far fa-address-card\"></i>&nbsp;\n              <span>{storage ? storage.period.toNumber() : \"\"} </span>\n            </p>\n            <p>\n              Players: \n              <i className=\"far fa-address-card\"></i>&nbsp; {userAddress}\n            </p>\n            <p>\n              Required Deposit: \n              <i className=\"far fa-address-card\"></i>&nbsp; \n              <span>{storage ? (storage.req_deposit.toNumber() / 1000000).toLocaleString(\"en-US\") : 0} ꜩ</span>\n            </p>\n            <p>\n              Total Deposit: \n              <i className=\"far fa-address-card\"></i>&nbsp; \n              <span>{storage ? (storage.total_deposit.toNumber() / 1000000).toLocaleString(\"en-US\") : 0} ꜩ</span>\n            </p>\n            <p>\n              Contract Address: \n              <i className=\"far fa-file-code\"></i>&nbsp;\n              <a\n                href={`https://better-call.dev/ithacanet/${contractAddress}/operations`}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                {contractAddress}\n              </a>\n            </p>\n            <p>\n              User Address: \n              <i className=\"far fa-address-card\"></i>&nbsp; {userAddress}\n            </p>\n            <p>\n              User Balance: \n              <i className=\"fas fa-piggy-bank\"></i>&nbsp;\n              {(userBalance / 1000000).toLocaleString(\"en-US\")} ꜩ\n            </p>\n          </div>\n          <DisconnectButton\n            wallet={wallet}\n            setPublicToken={setPublicToken}\n            setUserAddress={setUserAddress}\n            setUserBalance={setUserBalance}\n            setWallet={setWallet}\n            setTezos={setTezos}\n            setBeaconConnection={setBeaconConnection}\n          />\n        </div>\n        <div id=\"footer\">\n          <img src=\"built-with-taquito.png\" alt=\"Built with Taquito\" />\n        </div>\n      </div>\n    );\n  } else if (!publicToken && !userAddress && !userBalance) {\n    return (\n      <div className=\"main-box\">\n        <div className=\"title\">\n          <h1>Taquito Boilerplate</h1>\n          <a href=\"https://app.netlify.com/start/deploy?repository=https://github.com/ecadlabs/taquito-boilerplate\">\n            <img\n              src=\"https://www.netlify.com/img/deploy/button.svg\"\n              alt=\"netlify-button\"\n            />\n          </a>\n        </div>\n        <div id=\"dialog\">\n          <header>Welcome to Taquito Boilerplate App!</header>\n          <div id=\"content\">\n            <p>Hello!</p>\n            <p>\n              This is a template Tezos dApp built using Taquito. It's a starting\n              point for you to hack on and build your own dApp for Tezos.\n              <br />\n              If you have not done so already, go to the{\" \"}\n              <a\n                href=\"https://github.com/ecadlabs/taquito-boilerplate\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                Taquito boilerplate Github page\n              </a>{\" \"}\n              and click the <em>\"Use this template\"</em> button.\n            </p>\n            <p>Go forth and Tezos!</p>\n          </div>\n          <ConnectButton\n            Tezos={Tezos}\n            setContract={setContract}\n            setPublicToken={setPublicToken}\n            setWallet={setWallet}\n            setUserAddress={setUserAddress}\n            setUserBalance={setUserBalance}\n            setStorage={setStorage}\n            contractAddress={contractAddress}\n            setBeaconConnection={setBeaconConnection}\n            setPlayerStatus={setPlayerStatus}\n            wallet={wallet}\n          />\n        </div>\n        <div id=\"footer\">\n          <img src=\"built-with-taquito.png\" alt=\"Built with Taquito\" />\n        </div>\n      </div>\n    );\n  } else {\n    return <div>An error has occurred</div>;\n  }\n};\n\nexport default App;","import React, { Dispatch, SetStateAction, useState, useEffect } from \"react\";\nimport { TezosToolkit } from \"@taquito/taquito\";\nimport { BeaconWallet } from \"@taquito/beacon-wallet\";\nimport {\n  NetworkType,\n  BeaconEvent,\n  defaultEventCallbacks\n} from \"@airgap/beacon-sdk\";\n\ntype ButtonProps = {\n  Tezos: TezosToolkit;\n  setContract: Dispatch<SetStateAction<any>>;\n  setWallet: Dispatch<SetStateAction<any>>;\n  setUserAddress: Dispatch<SetStateAction<string>>;\n  setUserBalance: Dispatch<SetStateAction<number>>;\n  setStorage: Dispatch<SetStateAction<number>>;\n  contractAddress: string;\n  setBeaconConnection: Dispatch<SetStateAction<boolean>>;\n  setPublicToken: Dispatch<SetStateAction<string | null>>;\n  setPlayerStatus: Dispatch<SetStateAction<string>>;\n  wallet: BeaconWallet;\n};\n\nconst ConnectButton = ({\n  Tezos,\n  setContract,\n  setWallet,\n  setUserAddress,\n  setUserBalance,\n  setStorage,\n  contractAddress,\n  setBeaconConnection,\n  setPublicToken,\n  setPlayerStatus,\n  wallet\n}: ButtonProps): JSX.Element => {\n\n  const setup = async (userAddress: string): Promise<void> => {\n    setUserAddress(userAddress);\n    // updates balance\n    const balance = await Tezos.tz.getBalance(userAddress);\n    setUserBalance(balance.toNumber());\n    // creates contract instance\n    const contract = await Tezos.wallet.at(contractAddress);\n    const storage: any = await contract.storage();\n    console.log(\"storage \", storage);\n    setContract(contract);\n    setStorage(storage);\n\n    const player_status = await storage.players_status.get(userAddress);\n    setPlayerStatus(player_status);\n  };\n\n  const connectWallet = async (): Promise<void> => {\n    try {\n      await wallet.requestPermissions({\n        network: {\n          type: NetworkType.ITHACANET,\n          rpcUrl: \"https://rpc.ithacanet.teztnets.xyz\"\n        }\n      });\n      // gets user's address\n      const userAddress = await wallet.getPKH();\n      await setup(userAddress);\n      setBeaconConnection(true);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    (async () => {\n      // creates a wallet instance\n      const wallet = new BeaconWallet({\n        name: \"Taquito Boilerplate\",\n        preferredNetwork: NetworkType.ITHACANET,\n        disableDefaultEvents: true, // Disable all events / UI. This also disables the pairing alert.\n        eventHandlers: {\n          // To keep the pairing alert, we have to add the following default event handlers back\n          [BeaconEvent.PAIR_INIT]: {\n            handler: defaultEventCallbacks.PAIR_INIT\n          },\n          [BeaconEvent.PAIR_SUCCESS]: {\n            handler: data => setPublicToken(data.publicKey)\n          }\n        }\n      });\n      Tezos.setWalletProvider(wallet);\n      setWallet(wallet);\n      // checks if wallet was connected before\n      const activeAccount = await wallet.client.getActiveAccount();\n      if (activeAccount) {\n        const userAddress = await wallet.getPKH();\n        await setup(userAddress);\n        setBeaconConnection(true);\n      }\n    })();\n  }, []);\n\n  return (\n    <div className=\"buttons\">\n      <button className=\"button\" onClick={connectWallet}>\n        <span>\n          <i className=\"fas fa-wallet\"></i>&nbsp; Connect with wallet\n        </span>\n      </button>\n    </div>\n  );\n};\n\nexport default ConnectButton;\n","import React, { Dispatch, SetStateAction } from \"react\";\nimport { BeaconWallet } from \"@taquito/beacon-wallet\";\nimport { TezosToolkit } from \"@taquito/taquito\";\n\ninterface ButtonProps {\n  wallet: BeaconWallet | null;\n  setPublicToken: Dispatch<SetStateAction<string | null>>;\n  setUserAddress: Dispatch<SetStateAction<string>>;\n  setUserBalance: Dispatch<SetStateAction<number>>;\n  setWallet: Dispatch<SetStateAction<any>>;\n  setTezos: Dispatch<SetStateAction<TezosToolkit>>;\n  setBeaconConnection: Dispatch<SetStateAction<boolean>>;\n}\n\nconst DisconnectButton = ({\n  wallet,\n  setPublicToken,\n  setUserAddress,\n  setUserBalance,\n  setWallet,\n  setTezos,\n  setBeaconConnection\n}: ButtonProps): JSX.Element => {\n  const disconnectWallet = async (): Promise<void> => {\n    //window.localStorage.clear();\n    setUserAddress(\"\");\n    setUserBalance(0);\n    setWallet(null);\n    const tezosTK = new TezosToolkit(\"https://rpc.ithacanet.teztnets.xyz\");\n    setTezos(tezosTK);\n    setBeaconConnection(false);\n    setPublicToken(null);\n    console.log(\"disconnecting wallet\");\n    if (wallet) {\n      await wallet.client.removeAllAccounts();\n      await wallet.client.removeAllPeers();\n      await wallet.client.destroy();\n    }\n  };\n\n  return (\n    <div className=\"buttons\">\n      <button className=\"button\" onClick={disconnectWallet}>\n        <i className=\"fas fa-times\"></i>&nbsp; Disconnect wallet\n      </button>\n    </div>\n  );\n};\n\nexport default DisconnectButton;\n","import React, { useState, Dispatch, SetStateAction } from \"react\";\nimport { TezosToolkit, WalletContract } from \"@taquito/taquito\";\n\ninterface UpdateContractProps {\n  contract: WalletContract | any;\n  setUserBalance: Dispatch<SetStateAction<any>>;\n  Tezos: TezosToolkit;\n  userAddress: string;\n  setStorage: Dispatch<SetStateAction<number>>;\n}\n\nconst UpdateContract = ({ contract, setUserBalance, Tezos, userAddress, setStorage }: UpdateContractProps) => {\n  const [loadingDeposit, setLoadingDeposit] = useState<boolean>(false);\n  const [loadingEarlyWithdrawal, setLoadingEarlyWithdrawal] = useState<boolean>(false);\n  const [loadingRefresh, setLoadingRefresh] = useState<boolean>(false);\n\n  const deposit = async() : Promise<void> => {\n    setLoadingDeposit(true);\n    try {\n      const storage: any = await contract.storage();\n      const op = await contract.methods.deposit().send({amount: storage.req_deposit.toNumber() / 1000000});\n      await op.confirmation();\n      const newStorage: any = await contract.storage();\n      if (newStorage) setStorage(newStorage);\n      setUserBalance(await Tezos.tz.getBalance(userAddress));\n    } catch (error) {\n      console.log(error);\n    } finally {\n      setLoadingDeposit(false);\n    }\n  }\n\n  const early_withdraw = async() : Promise<void> => {\n    setLoadingEarlyWithdrawal(true);\n    try {\n      const op = await contract.methods.earlyWithdraw().send();\n      await op.confirmation();\n      const newStorage: any = await contract.storage();\n      if (newStorage) setStorage(newStorage);\n      setUserBalance(await Tezos.tz.getBalance(userAddress));\n    } catch (error) {\n      console.log(error);\n    } finally {\n      setLoadingEarlyWithdrawal(false);\n    }\n  }\n\n  const refresh = async() : Promise<void> => {\n    setLoadingRefresh(true);\n    try {\n      const op = await contract.methods.update().send();\n      await op.confirmation();\n      const newStorage: any = await contract.storage();\n      if (newStorage) setStorage(newStorage);\n      setUserBalance(await Tezos.tz.getBalance(userAddress));\n    } catch (error) {\n      console.log(error);\n    } finally {\n      setLoadingRefresh(false);\n    }\n  }\n\n\n  if (!contract && !userAddress) return <div>&nbsp;</div>;\n  return (\n    <div className=\"buttons\">\n      <button className=\"button\" disabled={loadingDeposit} onClick={deposit}>\n        {loadingDeposit ? (\n          <span>\n            <i className=\"fas fa-spinner fa-spin\"></i>&nbsp; Please wait\n          </span>\n        ) : (\n          <span>\n            <i className=\"fas fa-plus\"></i>&nbsp; Deposit Tezos\n          </span>\n        )}\n      </button>\n      <button className=\"button\" disabled={loadingEarlyWithdrawal} onClick={early_withdraw}>\n        {loadingEarlyWithdrawal ? (\n          <span>\n            <i className=\"fas fa-spinner fa-spin\"></i>&nbsp; Please wait\n          </span>\n        ) : (\n          <span>\n            <i className=\"fas fa-minus\"></i>&nbsp; Early Withdraw\n          </span>\n        )}\n      </button>\n      <button className=\"button\" disabled={loadingRefresh} onClick={refresh}>\n        {loadingRefresh ? (\n          <span>\n            <i className=\"fas fa-spinner fa-spin\"></i>&nbsp; Please wait\n          </span>\n        ) : (\n          <span>\n            <i className=\"fas fa-minus\"></i>&nbsp; Refresh Status\n          </span>\n        )}\n      </button>\n    </div>\n  );\n};\n\nexport default UpdateContract;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}